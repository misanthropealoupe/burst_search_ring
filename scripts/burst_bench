#! /usr/bin/python
"""Benchmark the DM transform of burst_search

"""

import time
import argparse
import os
from os import path
import logging
from itertools import product

import numpy as np
import matplotlib.pyplot as plt

from burst_search.dedisperse import DMTransform


import math


logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)
logger.addHandler(logging.StreamHandler())

#removed mpi code


# Command line arguments.
parser = argparse.ArgumentParser(description='benchmark the dm transform')
parser.add_argument(
        '--num_channels',
        metavar="channels0",
        default=128,
        type=int,
        help="Number of channels to dedisperse; start of range - value increases by factors of two",
        )
parser.add_argument(
        '--num_channels_samples',
        metavar="channels_samples",
        default=12,
        type=int,
        help="Number of power 2 orders of magnitude to test",
        )
parser.add_argument(
        '--max_dm',
        metavar="dm_max0",
        default=1000.0,
        type=float,
        help="Maximum dm to transform in pc cm^-3 units; start of range",
        )
parser.add_argument(
        '--max_dm1',
        metavar="dm_max1",
        default=5000.0,
        type=float,
        help="Maximum dm to transform in pc cm^-3 units; end of range",
        )
parser.add_argument(
        '--max_dm_samples',
        metavar="dm_samples",
        default=1,
        type=int,
	)
parser.add_argument(
        "-r", '--time_res',
        metavar="time_res",
        default=0.001,
        type=float,
        help="Time resolution of data",
        )
parser.add_argument(
        '--time_res1',
        metavar="time_res1",
        default=0.01,
        type=float,
        help="Time resolution of data (max)",
        )
parser.add_argument(
        '--time_res_samples',
        metavar="time_res_samples",
        default=1,
        type=int,
        help="number of time_res samples",
        )
parser.add_argument(
        '--length_time',
        metavar="tw0",
        default=60.0,
        type=float,
        help="Length of window in time (start of range)",
        )
parser.add_argument(
        '--length_time1',
        metavar="tw1",
        default=70.0,
        type=float,
        help="Length of window in time  (end of range)",
        )
parser.add_argument(
        '--length_time_samples',
        metavar="tw_samples",
        default=1,
        type=int,
        )
parser.add_argument(
        "-c", '--count',
        metavar="count",
        default=1,
        type=int,
        help="Times to run benchmark (for statistics)",
        )
parser.add_argument(
        "-t", '--omp_num_threads',
        metavar="omp_threads",
        type=int,
        help="Number of threads that OMP is forced to use",
        )
parser.add_argument(
        "-f", '--freq_zero',
        metavar="minimum frequency",
        default=400.0,
        type=float,
        help="Minimum frequency to transform (MHz)",
        )
parser.add_argument(
        "-b", '--bandwidth',
        metavar="bandwidth",
        default=400.0,
        type=float,
        help="Frequency bandwidth (MHz)",
        )
parser.add_argument(
        "-s", '--samples',
        metavar="samples",
        default=5,
        type=int,
        help="Number of samples per parameter",
        )
parser.add_argument(
        '-j', '--jon',
        metavar="verify",
        default=0,
        type=int,
        help="Verify and visually compare sievers/roman dedisperse",
        )

def make_transient(nchan, fmin, bandwidth, time_window, ntime,dm=100.0):
	dt = time_window/float(ntime)
	df = bandwidth/float(nchan)
	width = 0.01
	dw = int(width/dt)

	dat = np.zeros((nchan,ntime),dtype=np.float32)
	center_t = int(dat.shape[1]/2)
	for i in xrange(0,len(dat)):
		disp_delay = int(dm*4.1488*1000.0*(1.0/((fmin + (nchan - 1 - i)*df)**2))/dt)
		dat[i,center_t:center_t + dw] = 1.0
		if disp_delay > 0:
			dat[i,disp_delay:] = dat[i,:-disp_delay]
	return dat

if __name__ == "__main__":
	args = parser.parse_args()

	nchan = args.num_channels
	nchan_samples = args.num_channels_samples
	count = args.count
	f0 = args.freq_zero
	bw = args.bandwidth
	time_window = args.length_time
	time_window1 = args.length_time1
	tw_samples = args.length_time_samples
	max_dm = args.max_dm
	max_dm1 = args.max_dm1
	max_dm_samples = args.max_dm_samples
	dt = args.time_res
	dt1 = args.time_res1
	dt_samples = args.time_res_samples
	#samples = args.samples


	#Does not seem to matter on our
	#UBC test machine
	#if args.omp_num_threads:
	#	threads = args.omp_num_threads
	#	print 'using %i omp threads' % threads
	#	os.environ['OMP_DYNAMIC'] = 'FALSE'
	#	os.environ['OMP_NUM_THREADS'] = str(threads)
	#else:
	#	os.environ['OMP_DYNAMIC'] = 'TRUE'

	time_windows = [time_window]
	if tw_samples > 1:
		time_windows = [a for a in np.linspace(time_window, time_window1, tw_samples)]

	max_dms = [max_dm]
	if max_dm_samples > 1:
		max_dms = [a for a in np.linspace(max_dm, max_dm1, max_dm_samples)]

	channels = [nchan]
	if nchan_samples > 1:
		channels = [None]*nchan_samples
		for i in xrange(0,nchan_samples):
			channels[i] = nchan*(2**i)
		nc_xlab = [str(n) for n in channels]

	dts = [dt]
	if dt_samples > 1:
		dts = [a for a in np.linspace(dt, dt1, dt_samples)]

	times = []
	for params in product(time_windows, max_dms, channels,dts):
		time_window = params[0]
		max_dm = params[1]
		nchan = params[2]
		this_dt = params[3]

		ntime = int(time_window/this_dt)
		trans = DMTransform(dt,nchan,f0 + bw,-bw/nchan,max_dm)
		for i in xrange(0,count):
			dat = np.matrix(np.random.rand(nchan,ntime), dtype=np.float32)
			#dat = make_transient(nchan,f0,bw,time_window,ntime,dm=100.0)
			print 'attempting test with params \n tw {0}, max dm {1}, nchan {2}, dt {3}'.format(
				time_window, max_dm, nchan, this_dt)

			print 'effective channels: {0}'.format(2**trans.depth)
			t0 = time.time()
			if args.jon:
				trans(dat,jon=1)
			else:
				trans(dat,jon=0)
			times.append([time.time() - t0,time_window,max_dm,nchan,this_dt])
			print 'complete; t = {0}'.format(times[-1][0])

	if tw_samples > 1:
		tw_series = []
		for tw in time_windows:
			entry = []
			for t in times:
				if t[1] == tw:
					entry.append(t[0])
			tw_series.append(np.mean(entry))
		plt.figure()
		plt.plot(tw_series)
		plt.xlabel('parameter value')
		plt.ylabel('dedisperse execution time (s)')
		plt.title('time window behavior')
		plt.savefig('results/tw_series.png')

	if max_dm_samples > 1:
		dm_series = []
		for dm in max_dms:
			entry = []
			for t in times:
				if t[2] == dm:
					entry.append(t[0])
			dm_series.append(np.mean(entry))
		plt.figure()
		plt.plot(dm_series)
		plt.xlabel('parameter value')
		plt.ylabel('dedisperse execution time (s)')
		plt.title('max dm behavior')
		plt.savefig('results/dw_series.png')

	if nchan_samples > 1:
		ch_series = []
		stdev = []
		for nc in channels:
			entry = []
			for t in times:
				if t[3] == nc:
					entry.append(t[0])
			stdev.append(np.std(entry))
			ch_series.append(np.mean(entry))
		stdev = np.array(stdev)
		plt.figure()
		ax = plt.gca()
		plt.errorbar(channels, ch_series,yerr=3.0*stdev)
		ax.text(0.60, 0.15, 'max_dm: {0}\ntime_window: {1}'.format(max_dms[0],time_windows[0]),
			verticalalignment='bottom', horizontalalignment='left',
			transform=ax.transAxes, color='green', fontsize=15)
		ax.set_xticks(channels)
		ax.set_xticklabels(nc_xlab)
		plt.xlabel('parameter value')
		plt.ylabel('dedisperse execution time (s)')
		plt.title('channel count behavior')
		plt.savefig('results/ch_series.png')

	if dt_samples > 1:
		dt_series = []
		stdev = []
		for dti in dts:
			entry = []
			for t in times:
				if t[4] == dti:
					entry.append(t[0])
			stdev.append(np.std(entry))
			dt_series.append(np.mean(entry))
		stdev = np.array(stdev)
		plt.figure()
		ax = plt.gca()
		dt_lab = ['{:.1e}'.format(d) for d in dts]
		dt_lab = dt_lab[::-1]
		dts = [1/d for d in dts]
		plt.errorbar(dts, dt_series, yerr=3.0*stdev)
		fit = np.polyfit(dts,dt_series,1)
		fit_plt = [fit[1] + fit[0]*d for d  in dts]
		plt.plot(dts, fit_plt,color='red',linestyle='--')
		ax.text(0.50, 0.15, 'n_chan: {0}\nmax_dm: {1}\ntime_window: {2}'.format(channels[0],max_dms[0],time_windows[0]),
			verticalalignment='bottom', horizontalalignment='left',
			transform=ax.transAxes, color='green', fontsize=15)
		ax.text(0.50, 0.35, 'linear fit params a/tau + b\na: {0:.2e}, b: {1:.2e}'.format(fit[0], fit[1]),
			verticalalignment='bottom', horizontalalignment='left',
			transform=ax.transAxes, color='purple', fontsize=15)
		ax.set_xticklabels(dt_lab)
		plt.xlabel('parameter value (s)')
		plt.ylabel('dedisperse execution time (s)')
		plt.title('inverse time resolution behavior')
		plt.savefig('results/tr_series.png')

	tmat = np.matrix(times)
	print "Total time: {0} for {1} trials\nAverage: {2}, Stdev: {3}".format(np.sum(tmat[:,0]),len(times),np.mean(tmat[:,0]),np.std(tmat[:,0]))
   	plt.show()

   	#print 'results: \n'
   	#print '{0} executions in {1} seconds \n average: {2} +- {3} {4}, stdev: {5}\n'.format(samples*count,sum(times),
   	#	np.mean(times),np.max(np.array(times) - np.mean(times)),np.min(np.array(times) - np.mean(times)),np.std(times))
